(defun append (l m)
   (cond ((null l) m)
         (t (cons (car l) (append (cdr l) m) )) ))

(defun length (l)
   (cond ((null l) 0)
         (t (add1 (length (cdr l)) )) ))

(defun assq (x l)
   (cond ((null l) nil)
         ((eq x (car (car l))) (car l))
         (t (assq x (cdr l))) ))

(defun equal (x y)
   (cond ((eq x y) t)
         ((atom x) nil)
         ((atom y) nil)
         ((equal (car x)(car y)) (equal (cdr x)(cdr y))) ))

(defun member (x l)
   (cond ((null l) nil)
         ((equal x (car l)) l)
         (t (member x (cdr l))) ))
