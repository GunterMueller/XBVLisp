; imprimeurs de notations IRCAM

; pour imprimer une expression IRCAM, faire (pp 'expression)

(setq lpar "(" rpar ")" dot ".")
(setq hbar "_" vbar "|")

(setq stack nil)
(dm push (call) (rplacb call ['newl 'stack (cadr call)]))
(dm pop (call) (rplacb call '(nextl stack)))
(de gensym l
  (let ((x nil) (l l))
    (if (null l) (implode x)
	(self (nconc x (explode (nextl l))) l))))
(de cadadr (x) (cadr (cadr x)))
(de cadddr (x) (cadr (cddr x)))

(setq lmilieu 35 lborne 70)
(de pp (e ;; der hb lastrc al lmi lbp)
  (status print 1)
  (terpri)
  (setq al nil lmi lmilieu lbo lborne)
  (setq e (irccopy e))
  (pass-0 e)
  (let (clash)
    (pass-1 e) (xline)
    (if clash (self)))
  (pass-2 e) (xline)
  (pass-3 e) (xline)
  (pass-4 e) (xline)
  (pass-5 e) (xline)
  (status print 0)
  (terpri))

(de pass-0 (e)
  (if (atom e) e
      (selectq (car e)
	(*varind* (tradob (caddr e) 'milieu))
	(*expind* (tradob (caadr e) 'milieu)
		  (tradob (cadadr e) 'borne)
		  (tradob (caddr (cadr e)) 'borne)
		  (pass-0 (caddr e)))
	(*recind* (tradob (caadr e) 'milieu)
		  (tradob (cadadr e) 'borne)
		  (tradob (caddr (cadr e)) 'borne)
		  (pass-0 (caddr e)) (pass-0 (cadddr e)))
	(*recpoint* e)
	(t (while (listp e) (pass-0 (nextl e)))))))

(de pass-1 (e)
  (if (atom e) (3pp e)
      (selectq (car e)
	(*varind* (3pp (gensym (cadr e) (cremin (caddr e)))))
	(*expind* (ifn hb (xpi (caddr (cadr e)))
		       (setq clash t) (3pp hbar))
		  (pass-1 (caddr e)))
	(*recind* (cond
		    ((null (caddr (cadr e))) (2pp vbar))
		    ((null hb) (if clash (3pp " ")
				   (xpi (caddr (cadr e)))
				   (setq hb t)
				   (rplaca (cddr (cadr e)) nil)))
		    (t (3pp hbar) (setq clash t)))
		  (push e)
		  (pass-1 (caddr e))
		  (pass-1 (cadddr e)))
	(*recpoint*
		  (setq lastrc (pop))
		  (cond
		    ((caddr (cadr lastrc)) (3pp hbar))
		    (hb (setq hb nil)
			(or (islpar der) (prin1 hbar))	; cas special ;
			    (s8p 1))
		    (t (2pp vbar) )))
	(list (3pp "[") (setq e (cdr e))
	      (while (listp e) (pass-1 (nextl e)))
	      (3pp "]"))
	(t (3pp lpar)
	   (while (listp e) (pass-1 (nextl e)))
	   (3pp rpar)))))

(de pass-2 (e)
  (if (atom e) (3pp e)
      (selectq (car e)
	(*varind* (3pp (gensym (cadr e) (cremin (caddr e)))))
	(*expind* (2pp vbar) (pass-2 (caddr e)))
	(*recind* (2pp vbar) (pass-2 (caddr e))
		  (pass-2 (cadddr e)))
	(*recpoint* (2pp vbar))
	(list (3pp "[") (setq e (cdr e))
	      (while (listp e) (pass-2 (nextl e)))
	      (3pp "]"))
	(t (3pp lpar)
	   (while (listp e) (pass-2 (nextl e)))
	   (3pp rpar)))))

(de pass-3 (e)
  (if (atom e) (2pp e)
      (selectq (car e)
	(*varind* (2pp (gensym (cadr e) (cremin (caddr e)))))
	(*expind* (2pp (cremin (caadr e))) (pass-3 (caddr e)))
	(*recind* (2pp (cremin (caadr e))) (pass-3 (caddr e))
		  (pass-3 (cadddr e)))
	(*recpoint* (2pp "-"))
	(list (2pp "[") (setq e (cdr e))
	      (while (listp e) (pass-3 (nextl e)))
	      (2pp "]"))
	(t (2pp lpar)
	   (while (listp e) (pass-3 (nextl e)))
	   (2pp rpar)))))

(de pass-4 (e)
  (if (atom e) (3pp e)
      (selectq (car e)
	(*varind* (3pp (gensym (cadr e) (cremin (caddr e)))))
	(*expind* (2pp vbar) (pass-4 (caddr e)))
	(*recind* (2pp vbar) (pass-4 (caddr e))
		  (prin1 hbar) (prin1 vbar)	; cas special ;
		  (outpos (- (outpos) 2))	; cas special ;
		  (setq hb nil)
		  (pass-4 (cadddr e)))
	(*recpoint* (2pp vbar) (setq hb t))
	(list (3pp "[") (setq e (cdr e))
	      (while (listp e) (pass-4 (nextl e)))
	      (3pp "]"))
	(t (3pp lpar)
	   (while (listp e) (pass-4 (nextl e)))
	   (3pp rpar)))))

(de pass-5 (e)
  (if (atom e) (3pp e)
      (selectq (car e)
	(*varind* (3pp (gensym (cadr e) (cremin (caddr e)))))
	(*expind* (xpi (cadadr e)) (pass-5 (caddr e)))
	(*recind* (xpi (cadadr e)) (pass-5 (caddr e))
		  (pass-5 (cadddr e)))
	(*recpoint* (3pp " "))
	(list (3pp "[") (setq e (cdr e))
	      (while (listp e) (pass-5 (nextl e)))
	      (3pp "]"))
	(t (3pp lpar)
	   (while (listp e) (pass-5 (nextl e)))
	   (3pp rpar)))))

(de s8p (x)
  (if hb
      (let (y x)
	(if (zerop y) t
	    (if (neq (outbuf (outpos)) " ") (outpos (+ x (outpos)))
		(prin1 hbar))
	    (self (1- y))))
      (outpos (+ x (outpos)))))

(de s8pl (e)
  (s8p (plength e)))
