(careful t)

(de foo (x)
  (let ((x x)(y (winp)) (z (gensym 'a x))(w x))
   (if (= x 0)(changewin y)
	(crewin z 10 20 10 15)
	(poscur 3 3)(print x)
	(poscur 3 3 ff)
	(wprint ff (1+ (- w x)))
	(wrefresh2 ff)
	(changewin 'bar)
	(delwin z)
	(self (1- x) y (gensym 'a x) w)))))))))

(de ba (x)(fo x)) (de fo (x)(rev x))

(de rev (l acc)
   (if l (rev (cdr l)(cons (car l) acc))
       acc)))))

(entree 'rev '(if (chemin-entree ba fo rev)
	(print "j'entre venant de ba -> fo -> rev")))

(sortie 'rev '(if (chemin-sortie ba fo rev)
	(print "je sorte de rev retour vers fo et ba")))

(example 'rev '(
     ((rev nil) ())
     ((rev '(a b c)) '(b c a))))))))

(assert-entree 'rev '(listp l)))

(assert-sortie 'rev '(equal (car l) (car (last sortie))))))))

;(crewin 'baobab 10 25 1 1)

;(crewin 'ff 12 30 0 0)

;(crewin 'foo 10 0 10 10)

;(crewin 'foobar 7 50 7 15)

;(crewin 'bar 20 40 2 20)

(crewin 'our-window 0 0 14 0)

;(crewin 'aa 0 0 12 0)

(de essai ()
 (crewin 'fen1 10 30 10 0)
 (wplarge)
 (wplhaut)
 (print 'et 'un 'petit 'essai 'un)
 (crewin 'fen2 15 50 5 20)
 (wprint fen1 'cela 'se 'voit 'il '?)
 (wrefresh2 'fen1))))))
