; Package Face : routines de dessin de visages ;

(print "Chargement de Face")
(setq --x-- careful careful nil)

(defmacro filled (sx sy new_col old_col)
    `(let ((Wl w)
	  (aW (if (listp w) (car w) w)))
      (ifn (or Wl (iswidget aW)) ()
	   (if ,new_col (xSetValues aW "foreground" ,new_col))
	   (xFillArcs aW           ; exterieur ;
		      (- x (+ dx ,sx))       (- y ,sy)
		      (* ,sx 2)	             (* ,sy 2)
		      0 full_pi
		      (+ x (- dx ,sx))       (- y ,sy)
		      (* ,sx 2)              (* ,sy 2)
		      0 full_pi)
	   (if ,old_col (xSetValues aW "foreground" ,old_col))
	   (if (listp Wl) 
	       (self (cdr Wl) (cadr Wl))))))

(de drawFace (f values)
    (let ((w (get (get --dface-- f) 'draw))
	  (x (get values 'x))
	  (y (get values 'y))
	  (s_x (get values 'tx))
	  (s_y (get values 'ty)))
      (let ((Wl w)
	    (aW (if (listp w) (car w) w))
	    (o_f (xGetValues (if (listp w) (car w) w) "foreground"))
	    (o_b (xGetValues (if (listp w) (car w) w) "background")))
	(ifn (or Wl (iswidget aW)) ()
	     (xSetValues aW "foreground" o_b)
	     (xFillArcs aW (- x (/ s_x 2)) (- y (/ s_y 2)) s_x s_y 0 full_pi)
	     (xSetValues aW "foreground" o_f)
	     (xDrawArcs aW 
			(- x (/ (* s_x (get values 'TOUR_X)) (* 2 MAX_VAL)))
			(- y (/ (* s_y (get values 'TOUR_Y)) (* 2 MAX_VAL)))
			(* (/ (* s_x (get values 'TOUR_X)) (* 2 MAX_VAL)) 2) 
			(* (/ (* s_y (get values 'TOUR_Y)) (* 2 MAX_VAL)) 2)
			0 full_pi)
	     (if (listp Wl) 
		 (self (cdr Wl) (cadr Wl) o_f o_b))))
      (drawBouche (+ y (/ (* (get values 'TOUR_Y) s_y) (* 5 MAX_VAL)))
		  (get values 'BOUCHE_TAILLE) 
		  (get values 'BOUCHE_OUVERTURE)
		  1)
      (drawBouche (+ y (/ (* (get values 'TOUR_Y) s_y) (* 5 MAX_VAL)))
		  (get values 'MOUSTACHES) 
		  (/ MAX_VAL 2) 
		  -1)
      (drawNez   (get values 'NEZ_TAILLE))
      (drawOeil  (- y (/ s_y 6))
		 (get values 'OEIL_TAILLE)
		 (get values 'OEIL_OUVERTURE)
		 (get values 'PUPILLE_TAILLE))))

(de RedessineBouche (vals f environ)
    (let ((x (get vals 'x))
	  (y (get vals 'y))
	  (s_x (get vals 'tx))
	  (s_y (get vals 'ty))
	  (w (get (get environ f) 'draw)))
      (drawBouche (+ y (/ (* (get vals 'TOUR_Y) s_y) (* 5 MAX_VAL)))
		  (get vals 'BOUCHE_TAILLE) 
		  (get vals 'BOUCHE_OUVERTURE)
		  1 t)))

(de drawBouche (y S O h isRe)
    (let ((ss_x (/ (* S s_x) MAX_VAL)) 
	  (os_y (/ (* O s_y) MAX_VAL))
	  (o_f (xGetValues (if (listp w) (car w) w) "foreground"))
	  (o_b (xGetValues (if (listp w) (car w) w) "background")))
      (let ((Wl w)
	    (aW (if (listp w) (car w) w)))
	(ifn (or Wl (iswidget aW)) ()
	     (if isRe 
		 (progn 
		   (xSetValues aW "foreground" o_b)
		   (xFillArcs aW
			      (- x (/ s_x 4))  (- y (/ s_y 4))
			      (/ s_x 2)  	     (/ s_y 2)
			      0 (- half_pi))
		   (xSetValues aW "foreground" o_f)))
	     (xFillArcs aW
			(- x (/ ss_x 4))    (- y (/ os_y 4))
			(/ ss_x 2)          (/ os_y 2)
			0 (* half_pi (- h)))
	     (xSetValues aW "foreground" o_b)
	     (xFillArcs aW
			(- x (/ ss_x 4))  (- y (/ os_y 10))
			(/ ss_x 2)  	  (/ os_y 5)
			0 (* half_pi (- h)))
	     (xSetValues aW "foreground" o_f)
	     (if (listp Wl) 
		 (self (cdr Wl) (cadr Wl)))))))

(de drawNez (S)
    (let ((ss_x (/ (* S s_x) (* 12 MAX_VAL))) 
	  (ss_y (/ (* S s_y) MAX_VAL)))
      (let ((Wl w)
	    (aW (if (listp w) (car w) w)))
	(ifn (or Wl (iswidget aW)) ()
	     (xFillArcs aW ; partie haute ;
			(- x ss_x)	    (- y (/ ss_y 16))
			(* ss_x 2)	    (/ ss_y 3)
			0 half_pi
			(- x ss_x)	    (+ y (/ ss_y 6))
			(* ss_x 2)	    (/ ss_y 8)
			0 (- half_pi))
	     (if (listp Wl) 
		 (self (cdr Wl) (cadr Wl)))))))

(de RedessineOeil (vals f environ)
    (let ((x (get vals 'x))
	  (y (get vals 'y))
	  (s_x (get vals 'tx))
	  (s_y (get vals 'ty))
	  (w (get (get environ f) 'draw)))
      (drawOeil (- y (/ s_y 6))
		(get vals 'OEIL_TAILLE) 
		(get vals 'OEIL_OUVERTURE)
		(get vals 'PUPILLE_TAILLE) t)))

(de drawOeil (y S O P isRe)
    (let ((o_f (xGetValues (if (listp w) (car w) w) "foreground"))
	  (o_b (xGetValues (if (listp w) (car w) w) "background"))
	  (dx (/ s_x 10))
	  (ssx (/ (* S s_x) (* 10 MAX_VAL)))
	  (10_MAX_VAL (* 10 MAX_VAL)))
      (if isRe (filled (/ s_x 10) (/ s_y 10) o_b o_f))
      (filled ssx (/ (* S s_y) 10_MAX_VAL))         ; exterieur ;
      (filled ssx (/ (* O s_y) 10_MAX_VAL) o_b o_f)
      (filled (/ (* P s_x) (* 2 10_MAX_VAL))
	      (/ (* P s_y) (* 2 10_MAX_VAL)))))))
			     

(setq careful --x--)