(ctrlz t)
(let ((-x- careful))
    (careful nil)
    (df traceprint (-x-) (nomacout)(eval (cons 'internalprint -x-))(macout))
    (df trace (-x-)
	(mapc -x- (lambda (y)
	    (if (or (numbp y)(listp y))() 
		(enleve-entree '%trac y)
		(enleve-sortie '%trac y)
	    	(put y 'entree 
		  (cons
		    `(%trac (outpos lmargin)
		       (let ((-x- (get (quote ,y) 'TRACE))
			     (-z- (car (%find (ival (quote ,y)) 10))))
		       (put (quote ,y) 'TRACE
			   (if (null -z-)(cons nil -x-)
				(if (null (car -x-))(cons 1 (cdr -x-))
				     (cons (1+ (car -x-))(cdr -x-)))))
		       (traceprint '"--->" (cons (quote ,y)
				(mapcar (car (fval (quote ,y)))
					(lambda (-z-)(eval -z-)) )))
		     	(setq lmargin (+ lmargin 3))))
		    (get y 'entree)))
		(put y 'sortie
		   (append (get y 'sortie)
		     `((%trac (setq lmargin (- lmargin 3))
			  (if (< lmargin 0)(setq lmargin 0))
			(let ((-x- (get (quote ,y) 'TRACE))
			     (-z- (car (%find (ival (quote ,y)) 10))))
			  (if -z- (let ((-z- (car -x-)))
				   (setq lmargin (- lmargin (* -z- 3)))
				   (outpos lmargin)
				   (prin1 "<") 
				   (princh "-" (* (1+ -x-) 3))
				   (traceprint (quote ,y) sortie))
			     (outpos lmargin)
			     (traceprint "<---" (quote ,y) sortie))
			   (put (quote ,y) 'TRACE (cdr -x-))))))))))
	-x-)

     (setq %trac 'progn)

     (df untrace (x)
	(mapc x (lambda (y)(enleve-entree '%trac y)
			   (enleve-sortie '%trac y)))
	x)

   (careful -x-)
)
