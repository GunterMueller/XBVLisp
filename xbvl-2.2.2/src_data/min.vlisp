; d'abord un minimax des plus simples

(de plusgrand (arbre)
    (if (atom arbre) arbre
        (print "je maximise :" 
           (apply 'max (prin1 (mapcar arbre 'pluspetit))))))

; et la contrepartie

(de pluspetit (arbre)
    (if (atom arbre) arbre
	(print "je minimise :" 
           (apply 'min (prin1 (mapcar arbre 'plusgrand))))))


; et les auxiliaires min et max

(de min l (trouve '<  10000 l))
(de max l (trouve '> -10000 l))

(de trouve (f val l)
  (cond ((null l) val)
	((f (car l) val) (trouve f (car l) (cdr l)))
	(t (trouve f val (cdr l)))))

(setq x '(((8 7 3)(9 1 6)(2 4 1))((1 3 5)(3 9 2)(6 5 2))((1 2 3)(9 7 2)
   (16 6 4))))

; combination de la generation de l'arbre et du mini-max

(de plusgrand1 (situation)
    (if (fini situation) (valeur-static situation)
        (print "je maximise :" 
           (apply 'max 
		(prin1 (mapcar (mouvemts-possibles situation) 'pluspetit1))))))

(de pluspetit1 (situation)
    (if (fini situation) (valeur-static situation)
        (print "je minimise :"
           (apply 'min
		(prin1 (mapcar (mouvemts-possibles situation) 'plusgrand1))))))

; et juste pour pouvoir tester, quelques fonctions auxiliaires:
; (en realite, naturellement, valeur-static serait une fonction qui evaluerait
; une situation donnee, fini serait une fonction qui determinerait quand
; une situation est stable, et mouvements-possibles serait une fonction
; qui genererait tous les successeurs d'une situation donnee)

(de valeur-static (situation) situation)

(de fini (situation) (atom situation))

(de mouvemts-possibles (situation) situation)

; si l'on veut utiliser un alpha-beta, le mapcar doit disparaitre,
; puisque, evidemment, pluspetit peut ou ne peut pas etre utilise sur
; tous les situations.

(de plusgrand2 (situation)(escape exit
    (if (fini situation) (valeur-static situation)
      (let ((list-de-situs (mouvemts-possibles situation)))
       (print "je maximise :"
        (apply 'max (prin1
		(let ((nouvelle-liste nil)
		      (list-de-situs list-de-situs))
		   (if (null list-de-situs)(reverse nouvelle-liste)
		       (self (cons 
			       (pluspetit2 (car list-de-situs)) nouvelle-liste)
                             (cdr list-de-situs))))))))))))

(de pluspetit2 (situation)(escape exit
    (if (fini situation) (valeur-static situation)
      (let ((list-de-situs (mouvemts-possibles situation)))
       (print "je minimise :"
        (apply 'min (prin1
            (let ((nouvelle-liste nil)
		  (list-de-situs list-de-situs))
	       (if (null list-de-situs)(reverse nouvelle-liste)
		       (self (cons 
			      (plusgrand2 (car list-de-situs)) nouvelle-liste)
			     (cdr list-de-situs)))))))))))

; introduisons l'alpha et le beta

(de plusgrand3 (situation alpha beta)(escape exit
    (if (fini situation) (valeur-static situation)
      (let ((list-de-situs (mouvemts-possibles situation)))
       (print "je maximise :"
        (apply 'max (prin1
		(let ((nouvelle-valeur nil)(nouvelle-liste nil)
		      (list-de-situs list-de-situs)(x))
		   (if (null list-de-situs)(reverse nouvelle-liste)
		       (self 
			   (setq x(pluspetit3 (car list-de-situs) alpha beta))
			   (cons x nouvelle-liste)
                           (cdr list-de-situs))))))))))))

(de pluspetit3 (situation alpha beta)(escape exit
    (if (fini situation) (valeur-static situation)
      (let ((list-de-situs (mouvemts-possibles situation)))
       (print "je minimise :"
        (apply 'min (prin1
            (let ((nouvelle-valeur nil)(nouvelle-liste nil)
		  (list-de-situs list-de-situs)(x))
	       (if (null list-de-situs)(reverse nouvelle-liste)
		       (self 
			  (setq x (plusgrand3 (car list-de-situs) alpha beta))
			  (cons x nouvelle-liste)
			  (cdr list-de-situs)))))))))))

; dans la version-3 alpha et beta sont disponibles mais utilise nulle part
; nouvelle-valeur recoit la valeur venant du niveau en dessous

; continuons

(de plusgrand4 (situation alpha beta)(escape exit
    (if (fini situation) (valeur-static situation)
      (let ((list-de-situs (mouvemts-possibles situation)))
		(let ((nouvelle-valeur nil)(nouvelle-liste nil)
		      (list-de-situs list-de-situs)(plus-grand)(x))
		   (if (null list-de-situs)
		       (print nouvelle-liste "je maximise:" plus-grand)
		       (self 
			   (setq x (pluspetit4 (car list-de-situs) alpha beta))
			   (setq x (cons x nouvelle-liste))
                           (cdr list-de-situs)
			   (apply 'max x))))))))))))

(de pluspetit4 (situation alpha beta)(escape exit
    (if (fini situation) (valeur-static situation)
      (let ((list-de-situs (mouvemts-possibles situation)))
            (let ((nouvelle-valeur nil)(nouvelle-liste nil)
		  (list-de-situs list-de-situs)(plus-petit)(x))
	       (if (null list-de-situs)
		   (print nouvelle-liste "je minimise:" plus-petit)
		       (self 
			  (setq x (plusgrand4 (car list-de-situs) alpha beta))
			  (setq x (cons x nouvelle-liste))
			  (cdr list-de-situs)
			  (apply 'min x)))))))))))

; apres avoir introduit le min ou max a l'interieur de la boucle
; introduisons des activites supplementaires

(de plusgrand5 (situation alpha beta)(escape exit
    (if (fini situation) (valeur-static situation)
            (let 
	      ((list-de-situs)(situ-suivant)(nouvelle-liste)(nouvelle-valeur)
	       (plus-grand))
		(setq list-de-situs (mouvemts-possibles situation))
		(let ()
		   (if (null list-de-situs) 
			(print nouvelle-liste "je maximise :" plus-grand)
		       (setq situ-suivant (car list-de-situs)
			     nouvelle-valeur (pluspetit5 situ-suivant alpha beta)
			     nouvelle-liste (cons nouvelle-valeur nouvelle-liste)
			     plus-grand (apply 'max nouvelle-liste))
		       (when (> plus-grand beta)
			  (exit (prin1 "beta-cutoff en maximisant" nouvelle-liste ":" plus-grand)))
		       (setq list-de-situs (cdr list-de-situs))
		       (self))))))))))

(de pluspetit5 (situation alpha beta)(escape exit
    (if (fini situation) (valeur-static situation)
            (let
	      ((list-de-situs)(situ-suivant)(nouvelle-liste)(nouvelle-valeur)
	       (plus-petit))
		(setq list-de-situs (mouvemts-possibles situation))
		(let ()
		   (if (null list-de-situs) 
			(print nouvelle-liste "je minimise :" plus-petit)
		       (setq situ-suivant (car list-de-situs)
			     nouvelle-valeur (plusgrand5 situ-suivant alpha beta)
			     nouvelle-liste (cons nouvelle-valeur nouvelle-liste)
			     plus-petit (apply 'min nouvelle-liste))
			(when (< plus-petit alpha)
			  (exit (prin1 "alpha-cutoff en maximisant" nouvelle-liste ":" plus-petit)))
			(setq list-de-situs (cdr list-de-situs))
		       (self))))))))))


; pour l'instant tout est prepare pour introduire des gains veritables
; deux choses manquent: 1) donner  a l'entree une valeur minimale a alpha et
;                          une valeur maximale a beta
;                       2) de modifier les valeurs de alpha et beta
; allons-y, et faisons voyager alpha et beta dans l'arbre:

(de plusgrand6 (situation alpha beta)(escape exit
    (if (fini situation) (valeur-static situation)
            (let 
	      ((list-de-situs)(situ-suivant)(nouvelle-valeur))
		(setq list-de-situs (mouvemts-possibles situation))
		(let ()
		   (if (null list-de-situs) 
			(print  situ-suivant "je maximise :" alpha)
		       (setq situ-suivant (car list-de-situs)
			     nouvelle-valeur (pluspetit6 situ-suivant alpha beta)
			     alpha (max nouvelle-valeur alpha))
		       (when (ge alpha beta)
			  (exit (print situ-suivant "beta-cutoff en maximisant:" alpha)))
		       (setq list-de-situs (cdr list-de-situs))
		       (self))))))))))

(de pluspetit6 (situation alpha beta)(escape exit
    (if (fini situation) (valeur-static situation)
            (let
	      ((list-de-situs)(situ-suivant)(nouvelle-valeur))
		(setq list-de-situs (mouvemts-possibles situation))
		(let ()
		   (if (null list-de-situs) 
			(print  situ-suivant "je minimise :" beta)
		       (setq situ-suivant (car list-de-situs)
			     nouvelle-valeur (plusgrand6 situ-suivant alpha beta)
			     beta (min nouvelle-valeur beta))
			(when (le beta alpha)
			  (exit (print situ-suivant "alpha-cutoff en minimisant:" beta)))
			(setq list-de-situs (cdr list-de-situs))
		       (self))))))))))

; enfin, le alpha-beta marche, le probleme restant est d'avoir perdu le
; coup a faire, corrigeons cela...

(de plusgrand7 (situation alpha beta prof)(escape exit
    (if (fini situation) [(valeur-static situation) nil]
            (let 
	      ((list-de-situs)(situ-suivant)(nouvelle-valeur)
	       (mv-nombre)(liste-de-mvs)(resultat))
		(setq list-de-situs (mouvemts-possibles situation)
		      mv-nombre 1
		      resultat [alpha nil])
		(let ()
		   (if (null list-de-situs) 
			(print  situ-suivant "je maximise :" resultat)
		       (setq situ-suivant (car list-de-situs)
			     nouvelle-valeur (pluspetit7 situ-suivant alpha beta (1+ prof))
			     liste-de-mvs (cadr nouvelle-valeur)
			     nouvelle-valeur (car nouvelle-valeur))
		       (when (> nouvelle-valeur alpha)
			  (setq alpha nouvelle-valeur
				resultat [nouvelle-valeur 
					    (cons mv-nombre liste-de-mvs)]))
		       (when (ge alpha beta)
			  (exit (print prof situ-suivant "beta-cutoff en maximisant:" resultat)))
		       (setq list-de-situs (cdr list-de-situs)
			     mv-nombre (1+ mv-nombre))
		       (self))))))))))

(de pluspetit7 (situation alpha beta prof)(escape exit
    (if (fini situation) [(valeur-static situation) nil]
            (let
	      ((list-de-situs)(situ-suivant)(nouvelle-valeur)
	       (mv-nombre)(liste-de-mvs)(resultat))
		(setq list-de-situs (mouvemts-possibles situation)
		      mv-nombre 1
		      resultat [beta nil])
		(let ()
		   (if (null list-de-situs) 
			(print  situ-suivant "je minimise :" resultat)
		       (setq situ-suivant (car list-de-situs)
			     nouvelle-valeur (plusgrand7 situ-suivant alpha beta (1+ prof))
			     liste-de-mvs (cadr nouvelle-valeur)
       			     nouvelle-valeur (car nouvelle-valeur))
			(when (< nouvelle-valeur beta)
				(setq beta nouvelle-valeur
				      resultat [nouvelle-valeur
					(cons mv-nombre liste-de-mvs)]))
			(when (le beta alpha)
			  (exit (print prof situ-suivant "alpha-cutoff en minimisant:" resultat)))
			(setq list-de-situs (cdr list-de-situs)
			      mv-nombre (1+ mv-nombre))
		       (self))))))))))


(de quoi (x) (plusgrand7 x -1000 1000 0))

; maintenant la fonction ramene une liste avec en CAR la valeur, et en CDR
; le chemin qu'on veut jouer
; le probleme restant est que mouvemts-possibles pourrait retourner une
; liste vide, et que le tout devrait etre ecrit dans un lisp un tant soit
; peu plus joli

(de plusgrand8 (situation alpha beta prof)(escape exit
     (let 
       ((list-de-situs (mouvemts-possibles situation))
	(situ-suivant nil)(nouvelle-valeur nil)
	(mv-nombre 1)(liste-de-mvs nil)(resultat [alpha nil]))
       (if (or (fini situation)(null list-de-situs))
	  [(valeur-static situation) nil]
		(let ()
		   (if (null list-de-situs) 
			(print  situ-suivant "je maximise :" resultat)
		       (setq situ-suivant (car list-de-situs)
			     nouvelle-valeur (pluspetit8 situ-suivant alpha beta (1+ prof))
			     liste-de-mvs (cadr nouvelle-valeur)
			     nouvelle-valeur (car nouvelle-valeur))
		       (when (> nouvelle-valeur alpha)
			  (setq alpha nouvelle-valeur
				resultat [nouvelle-valeur 
					    (cons mv-nombre liste-de-mvs)]))
		       (when (ge alpha beta)
			  (exit 
			    (print "a la profondeur" prof 
				"dans la situation" situ-suivant 
				"beta-cutoff en maximisant:" resultat)))
		       (setq list-de-situs (cdr list-de-situs)
			     mv-nombre (1+ mv-nombre))
		       (self)))))))

(de pluspetit8 (situation alpha beta prof)(escape exit
            (let 
	      ((list-de-situs (mouvemts-possibles situation))
	       (situ-suivant nil)(nouvelle-valeur nil)
	       (mv-nombre 1)(liste-de-mvs nil)(resultat [beta nil]))
	      (if (or (fini situation)(null list-de-situs))
		  [(valeur-static situation) nil]
		(let ()
		   (if (null list-de-situs) 
			(print  situ-suivant "je minimise :" resultat)
		       (setq situ-suivant (car list-de-situs)
			     nouvelle-valeur (plusgrand8 situ-suivant alpha beta (1+ prof))
			     liste-de-mvs (cadr nouvelle-valeur)
       			     nouvelle-valeur (car nouvelle-valeur))
			(when (< nouvelle-valeur beta)
				(setq beta nouvelle-valeur
				      resultat [nouvelle-valeur
					(cons mv-nombre liste-de-mvs)]))
			(when (le beta alpha)
			  (exit 
			     (print "a la profondeur"
				prof "dans la situation"
				situ-suivant 
				"alpha-cutoff en minimisant:" resultat)))
			(setq list-de-situs (cdr list-de-situs)
			      mv-nombre (1+ mv-nombre))
		       (self)))))))

